# -*- coding: utf-8 -*-
"""Project - 6 Wine Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oESTaUX-Y7xzgEaobDDspc8suX7p_vER

Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data Collection and Pre-Processing"""

wine_dataset = pd.read_csv('/content/winequality-red.csv')
wine_dataset.head()

# number of rows and colums
wine_dataset.shape

# check for null values
wine_dataset.isnull().sum()

# Statistical measure of dataset
wine_dataset.describe()

# number of values for each quality
sns.catplot(x = 'quality', data = wine_dataset, kind = 'count')

# volatile acidity vs Quality
plot = plt.figure(figsize = (5,5))
sns.barplot(x = 'quality', y = 'volatile acidity', data = wine_dataset)

# citric acid vs Quality
plot = plt.figure(figsize = (5,5))
sns.barplot(x = 'quality', y = 'citric acid', data = wine_dataset)

"""Correlation:

  Positive Correlation
  
  Negative Correlation
"""

correlation = wine_dataset.corr()

# constructing a heatmap to understand the correlation between columns
plt.figure(figsize = (10,10))
sns.heatmap(correlation, cbar = True, square = True, fmt = '.1f', annot = True, annot_kws = {'size': 8}, cmap = 'Reds')

"""Data Preprocessing"""

# separating data and label
X = wine_dataset.drop(columns = 'quality', axis = 1)

print(X)

"""Label Binarization"""

Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value >= 7 else 0)
print(Y)

# Train and test Data Split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training:

Random Forest Classifer


"""

model = RandomForestClassifier()

model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score for training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy for training data : ", training_data_accuracy)

# accuracy score for testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy for testing data : ", test_data_accuracy)

"""Building a predictive system"""

input_data = (7.5,0.52,0.11,1.5,0.079,11.0,39.0,0.9968,3.42,0.58,9.6)

# changing data into numpy array
prediction = model.predict(np.asarray(input_data).reshape(1, -1))

print(prediction)

if(prediction[0] ==  1):
  print("Good Quality Wine")
else:
  print("Bad Quality Wine")

